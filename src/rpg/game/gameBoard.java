/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package rpg.game;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.Timer;
import rpg.game.characters.Hunter;
import rpg.game.characters.Mage;
import rpg.game.characters.Player;
import rpg.game.characters.Warrior;

/**
 *
 * @author Krystian
 */
public class gameBoard extends javax.swing.JFrame {

    /**
     * Creates new form gameBoard
     */
    public gameBoard() {
        initComponents();
        playerName.setText(playerNameStr);
        characterClass.setText(characterClassStr);
        createCharacter();
        createEnemies();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jButton1 = new javax.swing.JButton();
        attackLabel = new javax.swing.JLabel();
        HPLabel = new javax.swing.JLabel();
        initiativeLabel = new javax.swing.JLabel();
        addAttackButton = new javax.swing.JButton();
        addHpButton = new javax.swing.JButton();
        addInitiativeButton = new javax.swing.JButton();
        numberOfAttackLabel = new javax.swing.JLabel();
        numberOfHpLabel = new javax.swing.JLabel();
        numberOfInitiativeLabel = new javax.swing.JLabel();
        skillpoints = new javax.swing.JLabel();
        playerProgressBar = new javax.swing.JProgressBar();
        playerPicture = new javax.swing.JLabel();
        enemyProgressBar = new javax.swing.JProgressBar();
        enemyPicture = new javax.swing.JLabel();
        playerName = new javax.swing.JLabel();
        enemyPlayerName = new javax.swing.JLabel();
        mage1Lev = new javax.swing.JButton();
        hunter1Lev = new javax.swing.JButton();
        warrior1Lev = new javax.swing.JButton();
        mages = new javax.swing.JLabel();
        hunters = new javax.swing.JLabel();
        warriors = new javax.swing.JLabel();
        characterClass = new javax.swing.JLabel();
        ball = new javax.swing.JLabel();
        fightStart = new javax.swing.JButton();
        infoAboutFightLabel = new javax.swing.JLabel();

        jScrollPane1.setViewportView(jTree1);

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        attackLabel.setText("Atak");

        HPLabel.setText("Punkty Życia");

        initiativeLabel.setText("Inicjatywa");

        addAttackButton.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        addAttackButton.setText("+");
        addAttackButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addAttackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAttackButtonActionPerformed(evt);
            }
        });

        addHpButton.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        addHpButton.setText("+");
        addHpButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addHpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addHpButtonActionPerformed(evt);
            }
        });

        addInitiativeButton.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        addInitiativeButton.setText("+");
        addInitiativeButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addInitiativeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addInitiativeButtonActionPerformed(evt);
            }
        });

        numberOfAttackLabel.setText("0");

        numberOfHpLabel.setText("0");

        numberOfInitiativeLabel.setText("0");

        skillpoints.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        skillpoints.setText("Pozostałe punkty umiejętności: 10");

        playerProgressBar.setValue(100);

        playerPicture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/mage.png"))); // NOI18N
        playerPicture.setName(""); // NOI18N

        enemyProgressBar.setValue(100);

        enemyPicture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/mage.png"))); // NOI18N

        playerName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        playerName.setText("Nazwa");
        playerName.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        enemyPlayerName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        enemyPlayerName.setText("Wróg");
        enemyPlayerName.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        mage1Lev.setBackground(new java.awt.Color(255, 51, 51));
        mage1Lev.setText("Poziom 1");
        mage1Lev.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        mage1Lev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mage1LevActionPerformed(evt);
            }
        });

        hunter1Lev.setBackground(new java.awt.Color(0, 204, 102));
        hunter1Lev.setText("Poziom 1");
        hunter1Lev.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        hunter1Lev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hunter1LevActionPerformed(evt);
            }
        });

        warrior1Lev.setBackground(new java.awt.Color(255, 153, 51));
        warrior1Lev.setText("Poziom 1");
        warrior1Lev.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        warrior1Lev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                warrior1LevActionPerformed(evt);
            }
        });

        mages.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        mages.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        mages.setText("Magowie");
        mages.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        hunters.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        hunters.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        hunters.setText("Tropiciele");
        hunters.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        warriors.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        warriors.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        warriors.setText("Wojownicy");
        warriors.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        characterClass.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        characterClass.setText("Klasa postaci");
        characterClass.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        ball.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/ball.png"))); // NOI18N

        fightStart.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        fightStart.setText("Start");
        fightStart.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        fightStart.setEnabled(false);
        fightStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fightStartActionPerformed(evt);
            }
        });

        infoAboutFightLabel.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        infoAboutFightLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        infoAboutFightLabel.setText("informacje o walce");
        infoAboutFightLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(initiativeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(HPLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)
                                    .addComponent(attackLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(numberOfAttackLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
                                    .addComponent(numberOfHpLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(numberOfInitiativeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(addAttackButton)
                                    .addComponent(addInitiativeButton)
                                    .addComponent(addHpButton))
                                .addGap(50, 224, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(skillpoints, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 165, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(mage1Lev)
                            .addComponent(mages, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(warrior1Lev)
                                .addGap(18, 18, 18)
                                .addComponent(hunter1Lev))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(warriors, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(hunters, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(44, 44, 44))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(playerName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(playerPicture, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(playerProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE))
                                .addGap(104, 104, 104)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(ball, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(68, 68, 68))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(fightStart, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(50, 50, 50)))
                                        .addGap(197, 197, 197))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(enemyPicture, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(enemyPlayerName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(enemyProgressBar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                            .addComponent(characterClass, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(154, 154, 154)
                .addComponent(infoAboutFightLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(skillpoints)
                    .addComponent(mages, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hunters, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(warriors, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(numberOfAttackLabel)
                                    .addComponent(attackLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(7, 7, 7))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(mage1Lev)
                                    .addComponent(warrior1Lev)
                                    .addComponent(hunter1Lev))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addAttackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addHpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addInitiativeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(numberOfHpLabel)
                            .addComponent(HPLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(initiativeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(numberOfInitiativeLabel))))
                .addGap(62, 62, 62)
                .addComponent(characterClass)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(playerPicture, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(playerProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(playerName))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(enemyPicture, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(enemyProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(enemyPlayerName))
                        .addComponent(ball)
                        .addComponent(fightStart, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(infoAboutFightLabel)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    //Fields declaration
    private Player player;
    private Player enemy;
    public static String playerNameStr;
    public static String characterClassStr;
            
    private Mage[] magesArray;
    private Warrior[] warriorsArray;
    private Hunter[] huntersArray;
    
    private static final int delay = 10;
    private Timer timer;
    
    private final String[] resourceName = {
        "/Resources/mage.png",
        "/Resources/warrior.png",
        "/Resources/hunter.png"
    };
    
    private final String[][] enemyName = {
        {"Nowicjusz", "Giermek", "Leśniczy"}
    };
   
    //methods definition
    public void createEnemies() {
        magesArray = new Mage[]{
            new Mage(10, 50, 1),
            new Mage(30, 150, 3),
            new Mage(60, 500, 6),
            new Mage(140, 1200, 10),
            new Mage(200, 1700, 15)
        };
        
        warriorsArray = new Warrior[]{
            new Warrior(7, 100, 3),
            new Warrior(15, 300, 6),
            new Warrior(30, 800, 8),
            new Warrior(70, 2000, 12),
            new Warrior(90, 5000, 20)
        };
        
        huntersArray = new Hunter[]{
            new Hunter(5, 130, 3),
            new Hunter(20, 310, 6),
            new Hunter(40, 700, 9),
            new Hunter(80, 1600, 14),
            new Hunter(150, 4000, 20)
        };
    }
    
    private void createCharacter() {
        if(characterClass.getText().equals("Wojownik")) {
            player = new Warrior(10, 10, 0);
        }
        else if(characterClass.getText().equals("Mag")) {
            player = new Mage(10, 500, 0);
        }
        else if(characterClass.getText().equals("Tropiciel")) {
            player = new Hunter(10, 10, 0);
        }              
    }
    
    public void setProgressBars() {
        playerProgressBar.setMaximum(player.getHp());
        playerProgressBar.setValue(player.getHp());
        
        enemyProgressBar.setMaximum(enemy.getHp());
        enemyProgressBar.setValue(enemy.getHp());        
    }
    
    private void updateSkillpoints() {       
        StringBuilder updateText = new StringBuilder("Pozostałe punkty umiejętności: "); 
        updateText.append(player.getAmountOfSkills());
        skillpoints.setText(updateText.toString());
        
        addAttackButton.setEnabled(true);
        addHpButton.setEnabled(true);
        addInitiativeButton.setEnabled(true);
    }
    
    public void addSkillHandler(javax.swing.JLabel amountOfSkillLabel) {
                
        if(player.getAmountOfSkills() > 0) {
            Integer amount = Integer.parseInt(amountOfSkillLabel.getText()) + 1;
            amountOfSkillLabel.setText(amount.toString());
            
            player.setAmountOfSkills(player.getAmountOfSkills() - 1);
            updateSkillpoints();
        } 
        if(player.getAmountOfSkills() == 0){
            addAttackButton.setEnabled(false);
            addHpButton.setEnabled(false);
            addInitiativeButton.setEnabled(false);
        }
    }
    
 
    private void addAttackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAttackButtonActionPerformed
        
        addSkillHandler(numberOfAttackLabel);
        player.setAttack(player.getAttack() + 40);
        
    }//GEN-LAST:event_addAttackButtonActionPerformed

    private void addHpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addHpButtonActionPerformed
        
        addSkillHandler(numberOfHpLabel);   
        player.setHp(player.getHp() + 10);
        
    }//GEN-LAST:event_addHpButtonActionPerformed

    private void addInitiativeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addInitiativeButtonActionPerformed
        
        addSkillHandler(numberOfInitiativeLabel); 
        player.setInitiative(player.getInitiative()+ 1); 
        
    }//GEN-LAST:event_addInitiativeButtonActionPerformed

    private void warrior1LevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_warrior1LevActionPerformed
        
        prepareFightHandler(resourceName[1], enemyName[0][1], "wojownik", 1, warriorsArray[0]);       
        
    }//GEN-LAST:event_warrior1LevActionPerformed

    private void disableButtons() {
        addAttackButton.setEnabled(false);
        addHpButton.setEnabled(false);
        addInitiativeButton.setEnabled(false);
        mage1Lev.setEnabled(false);
        warrior1Lev.setEnabled(false);
        hunter1Lev.setEnabled(false);
    }
    
    private void enablePreparingButtons() {
        mage1Lev.setEnabled(true);
        warrior1Lev.setEnabled(true);
        hunter1Lev.setEnabled(true);
    }
    private void addSkillpoint() {
        player.setAmountOfSkills(player.getAmountOfSkills() + 1);
        updateSkillpoints();
        enablePreparingButtons();
    }
    
    private int getPriority() {
        if(player.getInitiative() >= enemy.getInitiative()) {
            return 10;
        }
        else return -10;
    }
    
    ActionListener fightHandler() throws CloneNotSupportedException {

        disableButtons();
        
        Player clonedPlayer = (Player)player.clone();
        Player clonedEnemy = (Player)enemy.clone();               
        
        ActionListener fightPerformer = new ActionListener() {
            int move = getPriority();
                                   
            @Override
            public void actionPerformed(ActionEvent evt1) {                            
                //ball moves                
                ball.setLocation(ball.getLocation().x + move, ball.getLocation().y);
                
                //enemy was attacked
                if(ball.getLocation().x > enemyPicture.getLocation().x - 10) {
                    clonedEnemy.attack(clonedEnemy, clonedPlayer);                    
                    
                    if(clonedEnemy.getHp() <= 0) {
                        enemyProgressBar.setValue(0);
                        setProgressBars();
                        move = -move;
                        addSkillpoint();                        
                        infoAboutFightLabel.setText("informacje o walce");
                        timer.stop();
                        
                    }
                    enemyProgressBar.setValue(clonedEnemy.getHp());                                        
                    move = -move; 
                }
                
                //player was attacked
                if(ball.getLocation().x < playerPicture.getLocation().x + playerPicture.getWidth() + 10) {
                    clonedPlayer.attack(clonedPlayer, clonedEnemy);
                    
                    if(clonedPlayer.getHp() <= 0) {
                        playerProgressBar.setValue(0);
                        setProgressBars();
                        move = -move;  
                        infoAboutFightLabel.setText("informacje o walce");
                        timer.stop();
                    }
                    playerProgressBar.setValue(clonedPlayer.getHp());
                    move = -move;                    
                }                                                  
            }
        };
        return fightPerformer;
    }
    
    private void prepareFightHandler(String resName, String enemyNameLocal, String className, int level,Player specificEnemy) {
        enemyPicture.setIcon(new ImageIcon(getClass().getResource(resName)));
        enemyPlayerName.setText(enemyNameLocal);        
        infoAboutFightLabel.setText(String.format("Twoim wrogiem będzie %s na %d poziomie! Naciśnij start!", className, level));
        fightStart.setEnabled(true);
        enemy = specificEnemy;
        setProgressBars(); 
    }
    
    private void mage1LevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mage1LevActionPerformed
        
        prepareFightHandler(resourceName[0], enemyName[0][0], "mag", 1, magesArray[0]); 
        
    }//GEN-LAST:event_mage1LevActionPerformed

    private void hunter1LevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hunter1LevActionPerformed
        
        prepareFightHandler(resourceName[2], enemyName[0][2], "tropiciel", 1, huntersArray[0]);  
        
    }//GEN-LAST:event_hunter1LevActionPerformed

    private void fightStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fightStartActionPerformed
        
        try {
            timer = new Timer(delay, fightHandler());
        } catch (CloneNotSupportedException ex) {
            Logger.getLogger(gameBoard.class.getName()).log(Level.SEVERE, null, ex);
        }
        fightStart.setEnabled(false);
        timer.start();
        
    }//GEN-LAST:event_fightStartActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(gameBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(gameBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(gameBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(gameBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        playerNameStr = args[0];
        characterClassStr = args[1];
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new gameBoard().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel HPLabel;
    private javax.swing.JButton addAttackButton;
    private javax.swing.JButton addHpButton;
    private javax.swing.JButton addInitiativeButton;
    private javax.swing.JLabel attackLabel;
    private javax.swing.JLabel ball;
    private javax.swing.JLabel characterClass;
    private javax.swing.JLabel enemyPicture;
    private javax.swing.JLabel enemyPlayerName;
    private javax.swing.JProgressBar enemyProgressBar;
    private javax.swing.JButton fightStart;
    private javax.swing.JButton hunter1Lev;
    private javax.swing.JLabel hunters;
    private javax.swing.JLabel infoAboutFightLabel;
    private javax.swing.JLabel initiativeLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTree jTree1;
    private javax.swing.JButton mage1Lev;
    private javax.swing.JLabel mages;
    private javax.swing.JLabel numberOfAttackLabel;
    private javax.swing.JLabel numberOfHpLabel;
    private javax.swing.JLabel numberOfInitiativeLabel;
    private javax.swing.JLabel playerName;
    private javax.swing.JLabel playerPicture;
    private javax.swing.JProgressBar playerProgressBar;
    private javax.swing.JLabel skillpoints;
    private javax.swing.JButton warrior1Lev;
    private javax.swing.JLabel warriors;
    // End of variables declaration//GEN-END:variables
}
